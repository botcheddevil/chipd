--------------------
./configure
Sat Jul 20 11:34:07 IST 2013
Checking for gcc...
=== ztest898.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest898.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest898.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest898.c

Checking for shared library support...
=== ztest898.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest898.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest898.dylib ztest898.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest898.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest898.c
ztest898.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest898.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest898 ztest898.c
Checking for fseeko... Yes.

=== ztest898.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest898 ztest898.c
Checking for strerror... Yes.

=== ztest898.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest898.c
Checking for unistd.h... Yes.

=== ztest898.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest898.c
Checking for stdarg.h... Yes.

=== ztest898.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest898.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest898.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest898 ztest898.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest898.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest898.c
Checking for return value of vsnprintf()... Yes.

=== ztest898.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest898.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Sun Jul 21 08:36:46 IST 2013
Checking for gcc...
=== ztest912.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest912.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest912.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest912.c

Checking for shared library support...
=== ztest912.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest912.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest912.dylib ztest912.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest912.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest912.c
ztest912.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest912.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest912 ztest912.c
Checking for fseeko... Yes.

=== ztest912.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest912 ztest912.c
Checking for strerror... Yes.

=== ztest912.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest912.c
Checking for unistd.h... Yes.

=== ztest912.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest912.c
Checking for stdarg.h... Yes.

=== ztest912.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest912.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest912.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest912 ztest912.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest912.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest912.c
Checking for return value of vsnprintf()... Yes.

=== ztest912.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest912.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Sun Jul 21 08:42:31 IST 2013
Checking for gcc...
=== ztest1568.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest1568.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1568.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest1568.c

Checking for shared library support...
=== ztest1568.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest1568.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest1568.dylib ztest1568.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest1568.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1568.c
ztest1568.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest1568.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest1568 ztest1568.c
Checking for fseeko... Yes.

=== ztest1568.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest1568 ztest1568.c
Checking for strerror... Yes.

=== ztest1568.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest1568.c
Checking for unistd.h... Yes.

=== ztest1568.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest1568.c
Checking for stdarg.h... Yes.

=== ztest1568.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest1568.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1568.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest1568 ztest1568.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1568.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest1568.c
Checking for return value of vsnprintf()... Yes.

=== ztest1568.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest1568.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Sun Jul 21 08:46:37 IST 2013
Checking for gcc...
=== ztest2216.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest2216.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2216.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest2216.c

Checking for shared library support...
=== ztest2216.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest2216.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest2216.dylib ztest2216.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest2216.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2216.c
ztest2216.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest2216.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest2216 ztest2216.c
Checking for fseeko... Yes.

=== ztest2216.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest2216 ztest2216.c
Checking for strerror... Yes.

=== ztest2216.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest2216.c
Checking for unistd.h... Yes.

=== ztest2216.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest2216.c
Checking for stdarg.h... Yes.

=== ztest2216.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest2216.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2216.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest2216 ztest2216.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2216.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest2216.c
Checking for return value of vsnprintf()... Yes.

=== ztest2216.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest2216.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Sun Jul 21 09:02:21 IST 2013
Checking for gcc...
=== ztest2867.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest2867.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2867.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest2867.c

Checking for shared library support...
=== ztest2867.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest2867.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest2867.dylib ztest2867.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest2867.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2867.c
ztest2867.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest2867.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest2867 ztest2867.c
Checking for fseeko... Yes.

=== ztest2867.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest2867 ztest2867.c
Checking for strerror... Yes.

=== ztest2867.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest2867.c
Checking for unistd.h... Yes.

=== ztest2867.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest2867.c
Checking for stdarg.h... Yes.

=== ztest2867.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest2867.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2867.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest2867 ztest2867.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2867.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest2867.c
Checking for return value of vsnprintf()... Yes.

=== ztest2867.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest2867.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Sun Jul 21 09:33:52 IST 2013
Checking for gcc...
=== ztest3534.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest3534.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3534.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest3534.c

Checking for shared library support...
=== ztest3534.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest3534.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest3534.dylib ztest3534.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest3534.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3534.c
ztest3534.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest3534.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest3534 ztest3534.c
Checking for fseeko... Yes.

=== ztest3534.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest3534 ztest3534.c
Checking for strerror... Yes.

=== ztest3534.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest3534.c
Checking for unistd.h... Yes.

=== ztest3534.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest3534.c
Checking for stdarg.h... Yes.

=== ztest3534.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest3534.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3534.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest3534 ztest3534.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3534.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest3534.c
Checking for return value of vsnprintf()... Yes.

=== ztest3534.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest3534.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Sun Jul 21 09:44:00 IST 2013
Checking for gcc...
=== ztest4240.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest4240.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4240.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest4240.c

Checking for shared library support...
=== ztest4240.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest4240.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest4240.dylib ztest4240.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest4240.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4240.c
ztest4240.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest4240.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest4240 ztest4240.c
Checking for fseeko... Yes.

=== ztest4240.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest4240 ztest4240.c
Checking for strerror... Yes.

=== ztest4240.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest4240.c
Checking for unistd.h... Yes.

=== ztest4240.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest4240.c
Checking for stdarg.h... Yes.

=== ztest4240.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest4240.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4240.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest4240 ztest4240.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4240.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest4240.c
Checking for return value of vsnprintf()... Yes.

=== ztest4240.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest4240.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Sun Jul 21 09:44:23 IST 2013
Checking for gcc...
=== ztest4882.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest4882.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4882.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest4882.c

Checking for shared library support...
=== ztest4882.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest4882.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest4882.dylib ztest4882.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest4882.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4882.c
ztest4882.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest4882.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest4882 ztest4882.c
Checking for fseeko... Yes.

=== ztest4882.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest4882 ztest4882.c
Checking for strerror... Yes.

=== ztest4882.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest4882.c
Checking for unistd.h... Yes.

=== ztest4882.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest4882.c
Checking for stdarg.h... Yes.

=== ztest4882.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest4882.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4882.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest4882 ztest4882.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4882.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest4882.c
Checking for return value of vsnprintf()... Yes.

=== ztest4882.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest4882.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Sun Jul 21 09:45:01 IST 2013
Checking for gcc...
=== ztest5525.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest5525.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest5525.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest5525.c

Checking for shared library support...
=== ztest5525.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest5525.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest5525.dylib ztest5525.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest5525.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest5525.c
ztest5525.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest5525.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest5525 ztest5525.c
Checking for fseeko... Yes.

=== ztest5525.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest5525 ztest5525.c
Checking for strerror... Yes.

=== ztest5525.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest5525.c
Checking for unistd.h... Yes.

=== ztest5525.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest5525.c
Checking for stdarg.h... Yes.

=== ztest5525.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest5525.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest5525.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest5525 ztest5525.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest5525.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest5525.c
Checking for return value of vsnprintf()... Yes.

=== ztest5525.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest5525.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Sun Jul 21 09:45:48 IST 2013
Checking for gcc...
=== ztest6169.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest6169.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest6169.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest6169.c

Checking for shared library support...
=== ztest6169.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest6169.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest6169.dylib ztest6169.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest6169.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest6169.c
ztest6169.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest6169.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest6169 ztest6169.c
Checking for fseeko... Yes.

=== ztest6169.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest6169 ztest6169.c
Checking for strerror... Yes.

=== ztest6169.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest6169.c
Checking for unistd.h... Yes.

=== ztest6169.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest6169.c
Checking for stdarg.h... Yes.

=== ztest6169.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest6169.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest6169.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest6169 ztest6169.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest6169.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest6169.c
Checking for return value of vsnprintf()... Yes.

=== ztest6169.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest6169.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Sun Jul 21 09:53:01 IST 2013
Checking for gcc...
=== ztest6815.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest6815.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest6815.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest6815.c

Checking for shared library support...
=== ztest6815.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest6815.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest6815.dylib ztest6815.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest6815.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest6815.c
ztest6815.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest6815.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest6815 ztest6815.c
Checking for fseeko... Yes.

=== ztest6815.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest6815 ztest6815.c
Checking for strerror... Yes.

=== ztest6815.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest6815.c
Checking for unistd.h... Yes.

=== ztest6815.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest6815.c
Checking for stdarg.h... Yes.

=== ztest6815.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest6815.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest6815.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest6815 ztest6815.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest6815.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest6815.c
Checking for return value of vsnprintf()... Yes.

=== ztest6815.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest6815.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Sun Jul 21 09:55:23 IST 2013
Checking for gcc...
=== ztest7465.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest7465.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest7465.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest7465.c

Checking for shared library support...
=== ztest7465.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest7465.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest7465.dylib ztest7465.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest7465.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest7465.c
ztest7465.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest7465.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest7465 ztest7465.c
Checking for fseeko... Yes.

=== ztest7465.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest7465 ztest7465.c
Checking for strerror... Yes.

=== ztest7465.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest7465.c
Checking for unistd.h... Yes.

=== ztest7465.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest7465.c
Checking for stdarg.h... Yes.

=== ztest7465.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest7465.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest7465.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest7465 ztest7465.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest7465.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest7465.c
Checking for return value of vsnprintf()... Yes.

=== ztest7465.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest7465.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Sun Jul 21 21:32:39 IST 2013
Checking for gcc...
=== ztest8944.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest8944.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest8944.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest8944.c

Checking for shared library support...
=== ztest8944.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest8944.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest8944.dylib ztest8944.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest8944.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest8944.c
ztest8944.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest8944.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest8944 ztest8944.c
Checking for fseeko... Yes.

=== ztest8944.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest8944 ztest8944.c
Checking for strerror... Yes.

=== ztest8944.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest8944.c
Checking for unistd.h... Yes.

=== ztest8944.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest8944.c
Checking for stdarg.h... Yes.

=== ztest8944.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest8944.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest8944.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest8944 ztest8944.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest8944.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest8944.c
Checking for return value of vsnprintf()... Yes.

=== ztest8944.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest8944.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Sun Jul 21 21:34:49 IST 2013
Checking for gcc...
=== ztest9623.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest9623.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest9623.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest9623.c

Checking for shared library support...
=== ztest9623.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest9623.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest9623.dylib ztest9623.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest9623.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest9623.c
ztest9623.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest9623.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest9623 ztest9623.c
Checking for fseeko... Yes.

=== ztest9623.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest9623 ztest9623.c
Checking for strerror... Yes.

=== ztest9623.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest9623.c
Checking for unistd.h... Yes.

=== ztest9623.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest9623.c
Checking for stdarg.h... Yes.

=== ztest9623.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest9623.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest9623.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest9623 ztest9623.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest9623.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest9623.c
Checking for return value of vsnprintf()... Yes.

=== ztest9623.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest9623.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Tue Jul 23 22:02:24 IST 2013
Checking for gcc...
=== ztest395.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest395.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest395.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest395.c

Checking for shared library support...
=== ztest395.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest395.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest395.dylib ztest395.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest395.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest395.c
ztest395.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest395.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest395 ztest395.c
Checking for fseeko... Yes.

=== ztest395.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest395 ztest395.c
Checking for strerror... Yes.

=== ztest395.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest395.c
Checking for unistd.h... Yes.

=== ztest395.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest395.c
Checking for stdarg.h... Yes.

=== ztest395.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest395.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest395.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest395 ztest395.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest395.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest395.c
Checking for return value of vsnprintf()... Yes.

=== ztest395.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest395.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Tue Jul 23 22:02:45 IST 2013
Checking for gcc...
=== ztest1058.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest1058.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1058.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest1058.c

Checking for shared library support...
=== ztest1058.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest1058.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest1058.dylib ztest1058.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest1058.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1058.c
ztest1058.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest1058.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest1058 ztest1058.c
Checking for fseeko... Yes.

=== ztest1058.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest1058 ztest1058.c
Checking for strerror... Yes.

=== ztest1058.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest1058.c
Checking for unistd.h... Yes.

=== ztest1058.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest1058.c
Checking for stdarg.h... Yes.

=== ztest1058.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest1058.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1058.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest1058 ztest1058.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1058.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest1058.c
Checking for return value of vsnprintf()... Yes.

=== ztest1058.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest1058.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Tue Jul 23 22:03:12 IST 2013
Checking for gcc...
=== ztest1721.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest1721.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1721.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest1721.c

Checking for shared library support...
=== ztest1721.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest1721.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest1721.dylib ztest1721.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest1721.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1721.c
ztest1721.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest1721.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest1721 ztest1721.c
Checking for fseeko... Yes.

=== ztest1721.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest1721 ztest1721.c
Checking for strerror... Yes.

=== ztest1721.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest1721.c
Checking for unistd.h... Yes.

=== ztest1721.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest1721.c
Checking for stdarg.h... Yes.

=== ztest1721.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest1721.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1721.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest1721 ztest1721.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1721.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest1721.c
Checking for return value of vsnprintf()... Yes.

=== ztest1721.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest1721.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Tue Jul 23 22:04:28 IST 2013
Checking for gcc...
=== ztest2385.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest2385.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2385.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest2385.c

Checking for shared library support...
=== ztest2385.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest2385.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest2385.dylib ztest2385.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest2385.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2385.c
ztest2385.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest2385.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest2385 ztest2385.c
Checking for fseeko... Yes.

=== ztest2385.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest2385 ztest2385.c
Checking for strerror... Yes.

=== ztest2385.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest2385.c
Checking for unistd.h... Yes.

=== ztest2385.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest2385.c
Checking for stdarg.h... Yes.

=== ztest2385.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest2385.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2385.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest2385 ztest2385.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2385.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest2385.c
Checking for return value of vsnprintf()... Yes.

=== ztest2385.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest2385.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Tue Jul 23 22:05:15 IST 2013
Checking for gcc...
=== ztest3037.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest3037.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3037.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest3037.c

Checking for shared library support...
=== ztest3037.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest3037.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest3037.dylib ztest3037.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest3037.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3037.c
ztest3037.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest3037.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest3037 ztest3037.c
Checking for fseeko... Yes.

=== ztest3037.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest3037 ztest3037.c
Checking for strerror... Yes.

=== ztest3037.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest3037.c
Checking for unistd.h... Yes.

=== ztest3037.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest3037.c
Checking for stdarg.h... Yes.

=== ztest3037.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest3037.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3037.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest3037 ztest3037.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3037.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest3037.c
Checking for return value of vsnprintf()... Yes.

=== ztest3037.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest3037.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Tue Jul 23 22:06:06 IST 2013
Checking for gcc...
=== ztest3701.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest3701.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3701.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest3701.c

Checking for shared library support...
=== ztest3701.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest3701.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest3701.dylib ztest3701.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest3701.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3701.c
ztest3701.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest3701.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest3701 ztest3701.c
Checking for fseeko... Yes.

=== ztest3701.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest3701 ztest3701.c
Checking for strerror... Yes.

=== ztest3701.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest3701.c
Checking for unistd.h... Yes.

=== ztest3701.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest3701.c
Checking for stdarg.h... Yes.

=== ztest3701.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest3701.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3701.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest3701 ztest3701.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3701.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest3701.c
Checking for return value of vsnprintf()... Yes.

=== ztest3701.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest3701.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Thu Jul 25 21:19:11 IST 2013
Checking for gcc...
=== ztest519.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest519.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest519.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest519.c

Checking for shared library support...
=== ztest519.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest519.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest519.dylib ztest519.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest519.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest519.c
ztest519.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest519.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest519 ztest519.c
Checking for fseeko... Yes.

=== ztest519.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest519 ztest519.c
Checking for strerror... Yes.

=== ztest519.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest519.c
Checking for unistd.h... Yes.

=== ztest519.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest519.c
Checking for stdarg.h... Yes.

=== ztest519.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest519.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest519.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest519 ztest519.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest519.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest519.c
Checking for return value of vsnprintf()... Yes.

=== ztest519.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest519.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Sat Jun 28 13:01:37 IST 2014
Checking for gcc...
=== ztest28348.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest28348.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest28348.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest28348.c

Checking for shared library support...
=== ztest28348.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest28348.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest28348.dylib ztest28348.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest28348.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest28348.c
ztest28348.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest28348.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest28348 ztest28348.c
Checking for fseeko... Yes.

=== ztest28348.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest28348 ztest28348.c
Checking for strerror... Yes.

=== ztest28348.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest28348.c
Checking for unistd.h... Yes.

=== ztest28348.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest28348.c
Checking for stdarg.h... Yes.

=== ztest28348.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest28348.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest28348.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest28348 ztest28348.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest28348.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest28348.c
Checking for return value of vsnprintf()... Yes.

=== ztest28348.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest28348.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure
Sat Jun 28 13:07:31 IST 2014
Checking for gcc...
=== ztest29586.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest29586.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest29586.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest29586.c

Checking for shared library support...
=== ztest29586.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest29586.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest29586.dylib ztest29586.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest29586.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest29586.c
ztest29586.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest29586.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest29586 ztest29586.c
Checking for fseeko... Yes.

=== ztest29586.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest29586 ztest29586.c
Checking for strerror... Yes.

=== ztest29586.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest29586.c
Checking for unistd.h... Yes.

=== ztest29586.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest29586.c
Checking for stdarg.h... Yes.

=== ztest29586.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest29586.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest29586.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest29586 ztest29586.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest29586.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest29586.c
Checking for return value of vsnprintf()... Yes.

=== ztest29586.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest29586.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


